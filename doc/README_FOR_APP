Testing strategies:
    Generally only things that can break the functionality of the application are tested. Non-functional things such as text on a page are
    not tested, except to indicate the page the user is taken to and the state the page is in.

    Model testing is usually done first, followed by controller testing and integration tests, which are done to test the user's interaction
        with the interface and its results.
    
    Cucumber testing is considered redundant in this application, since it would only result in duplicating the rspec-capybara integrations tests.
        It would also necessitate maintaining a separate testing framework, which would have added unnecessary overhead to the project. Cucumber is
        to be used for acceptance testing (i.e. tests done to determine if the business requirements of a project are met), so it's very high level
        and operates above the scope of UI interaction. It is not clear how cucumber can be used properly for this project.

Create user model for registration
    Test to see if the user object responds to the following methods (or if the user table has these attributes):
        name
        email
        password_digest
        password
        password_confirmation
        authenticate
    Test validations for the following attributes (properties tested for are in square brackets):
        name => [presence of, length]
        email => [presence of, format, uniqueness]
        password_digest => [length]
		user_modelling
	Test that the model saves correctly

Do integration testing for static pages to test for the presence of elements
    Test static contents on the homepage
    Test links on the page
Do integration testing for registration to test user interaction
    Test links on the page
    Test input fields on page for content (see how app behaves with valid/invalid data)
Do controller testing for registrations
    Test variable assignment
    Test HTTP verb usage
    Test whether or not the new registrant is added based on input data
Do integration testing for logging in/out
    Test to ensure that only users with valid data can log in
    Test to ensure that logged in/out users are routed correctly
    Tried to test with Selenium for Javascript timeout/redirect, but the testing framework ignores the redirect when the Javascript timeout is engaged.
        So the selenium integration test is pending.

Create model for contacts
    Test to see if the contact object responds to the following methods (or if the contacts table has these attributes):
        name
        user_id
    Test validations for the following attributes (properties tested for are in square brackets):
        name => [presence of, length]
    Test the contacts association
        check if it belongs_to user and if user has_many contacts

Do controller testing for contacts
    Test variable assignment
    Test HTTP verb usage
    Test whether or not the new contact is added based on input data
    Test whether or not an existing contact is updated based on input data
    Test for filtering to ensure that only the correct user has access to methods such as index, edit, update, delete

Do integration testing for contacts
    Test access to index page based on user login status
    Test filter for correct users on index page:
        Only users with contacts are allowed to access this page
        Users with contacts must only be able to view their own contacts
    Test the outcome of entering valid/invalid data for creating/updating a contact
    Test contact deletion

